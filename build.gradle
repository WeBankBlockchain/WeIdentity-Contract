apply plugin: 'maven'
apply plugin: 'java'

// Specify target release version here
version '0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
// In this section you declare where to find the dependencies of your project
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "http://maven.aliyun.com/nexus/content/groups/public/"
    }
}

// In this section you declare the dependencies for your production and test code
List web3sdk_dependencies = [
        "io.netty:netty-all:4.1.15.Final",
        "io.netty:netty-tcnative:2.0.0.Final",
        "com.google.guava:guava:19.0",
        "com.github.fge:json-schema-validator:2.2.6",
        "org.apache.httpcomponents:httpclient:4.5.2",
        "org.bouncycastle:bcprov-jdk15on:1.54",
        "com.lambdaworks:scrypt:1.4.0",
        "com.squareup:javapoet:1.7.0",
        "io.reactivex:rxjava:1.2.4",
        "com.github.jnr:jnr-unixsocket:0.15",
        "org.fisco-bcos:web3sdk:1.2.5"
]

dependencies {
    compile web3sdk_dependencies
    testCompile web3sdk_dependencies
}


sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ['src/main/resources','src/test/resources']
        }
    }
}


task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

jar {
    baseName = project.name
    destinationDir file('dist/app')
    archiveName project.name +'-'+version+'.jar'

    exclude '**/*.xml'
    exclude '**/*.properties'

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf'
        }
        copy {
            from configurations.runtime
            into 'dist/lib'
        }
        copy {
            from file('.').listFiles().findAll { File f -> (f.name.endsWith('.bat') || f.name.endsWith('.sh') || f.name.endsWith('.env')) }
            into 'dist'
        }
    }
}
